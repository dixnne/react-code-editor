syntax = "proto3";

package compiler;

message Program {
    repeated Declaration declarations = 1;
}

message Declaration {
    oneof declaration {
        Function function = 1;
        VariableDeclaration variable = 2;
        StructDeclaration struct_decl = 3;
        ConstantDeclaration constant = 4;
        Statement statement = 5;
    }
}

message ConstantDeclaration {
    Identifier identifier = 1;
    optional Type const_type = 2;
    Expression value = 3;
}

message VariableDeclaration {
    Identifier identifier = 1;
    optional Type var_type = 2;
    Expression value = 3;
}

message Function {
    Identifier name = 1;
    repeated Parameter parameters = 2;
    Type return_type = 3;
    Block body = 4;
}

message Parameter {
    Identifier name = 1;
    Type param_type = 2;
}

message StructDeclaration {
    Identifier name = 1;
    repeated FieldDeclaration fields = 2;
}

message FieldDeclaration {
    Identifier name = 1;
    Type field_type = 2;
}

message Statement {
    oneof statement {
        Expression expression = 1;
        ReturnStatement return_statement = 2;
        IfStatement if_statement = 3;
        Block block = 4;
        WhileStatement while_statement = 5;
        ForStatement for_statement = 6;
        DoUntilStatement do_until_statement = 7;
    }
}

message Block {
    repeated Declaration statements = 1;
}

message ReturnStatement {
    Expression value = 1;
}

message IfStatement {
    Expression condition = 1;
    Block then_block = 2;
    optional ElseBranch else_block = 3;
}

message ElseBranch {
    oneof branch {
        IfStatement if_statement = 1;
        Statement block = 2;
    }
}

message WhileStatement {
    Expression condition = 1;
    Block body = 2;
}

message DoUntilStatement {
    Block body = 1;
    Expression condition = 2;
}

message ForStatement {
    Identifier variable = 1;
    Expression iterable = 2;
    Block body = 3;
}

message Expression {
    oneof expression {
        Identifier identifier = 1;
        Literal literal = 2;
        BinaryExpression binary = 3;
        UnaryExpression unary = 4;
        AssignmentExpression assignment = 5;
        GroupedExpression grouped = 6;
        FunctionCallExpression function_call = 7;
        ArrayExpression array = 8;
        ObjectExpression object = 9;
        SplatExpression splat = 10;
        StructInstantiationExpression struct_instantiation = 11;
        MemberAccessExpression member_access = 12;
    }
}

message Identifier {
    string name = 1;
    uint32 line = 2;
    uint32 column = 3;
}

message Literal {
    oneof literal {
        int64 int_value = 1;
        double float_value = 2;
        string string_value = 3;
        bool bool_value = 4;
    }
}

message BinaryExpression {
    Expression left = 1;
    BinaryOp op = 2;
    Expression right = 3;
}

message UnaryExpression {
    UnaryOp op = 1;
    Expression expr = 2;
}

message AssignmentExpression {
    Identifier target = 1;
    Expression value = 2;
}

message GroupedExpression {
    Expression expression = 1;
}

message FunctionCallExpression {
    Expression function = 1;
    repeated Expression arguments = 2;
}

message ArrayExpression {
    repeated Expression elements = 1;
}

message ObjectExpression {
    message Field {
        Identifier key = 1;
        Expression value = 2;
    }
    repeated Field fields = 1;
}

message SplatExpression {
    Expression expression = 1;
}

message StructInstantiationExpression {
    Identifier name = 1;
    message Field {
        Identifier key = 1;
        Expression value = 2;
    }
    repeated Field fields = 2;
}

message MemberAccessExpression {
    Expression object = 1;
    Identifier property = 2;
}

enum Type {
    INT = 0;
    FLOAT = 1;
    STRING = 2;
    BOOL = 3;
    VOID = 4;
}

enum BinaryOp {
    PLUS = 0;
    MINUS = 1;
    ASTERISK = 2;
    SLASH = 3;
    GREATER = 4;
    LESS = 5;
    GREATER_EQUAL = 6;
    LESS_EQUAL = 7;
    DOUBLE_EQUAL = 8;
    NOT_EQUAL = 9;
    DOUBLE_AMPERSAND = 10;
    DOUBLE_BAR = 11;
    PIPE = 12;
    SPREAD = 13;
    SWAP = 14;
}

enum UnaryOp {
    UNARY_MINUS = 0;
    EXCLAMATION = 1;
}
